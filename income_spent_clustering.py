# -*- coding: utf-8 -*-
"""Income_Spent_clustering.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1dqk_AOED1t6vntsZs2rLfk6CTQxDI2Yc

Importing the basic libraries
"""

import numpy as np
import matplotlib.pyplot as plt
import pandas as pd

""" Load and Summarize Dataset from Local Directory"""

from google.colab import files
uploaded = files.upload()

dataset = pd.read_csv('dataset.csv')

print(dataset.shape)
print(dataset.describe())
print(dataset.head(5))

"""Segregate and zip Dataset"""

income = dataset['INCOME'].values
spend = dataset['SPEND'].values
x = np.array(list(zip(income, spend)))
x

""" Finding optimized value of K"""

from sklearn.cluster import KMeans
 wcss = []
 for i in range(1,11):
   km = KMeans(n_clusters=i, random_state = 0)
   km.fit(x)
   wcss.append(km.inertia_)

plt.plot(range(1,11), wcss, color = 'red', marker = '8')
plt.title("Optimal K Value")
plt.xlabel("Number of clusters")
plt.ylabel("WCSS")
plt.show()

""" Finding K means with value k = 4

"""

model = KMeans(n_clusters = 6, random_state =0)
 y_means = model.fit_predict(x)

""" ## Visualising Clusters for k = 4 ##

cluster 1 : Customer with medium income and low spend

cluster 2 : Customer with high income and medium to high spend

cluster 3 : Customer with low income 

cluster 4 : Customer with medium income and high spend
"""

plt.scatter(x[y_means==0,0],x[y_means==0,1],s=50, c='brown',label='1')
plt.scatter(x[y_means==1,0],x[y_means==1,1],s=50, c='blue',label='2')
plt.scatter(x[y_means==2,0],x[y_means==2,1],s=50, c='green',label='3')
plt.scatter(x[y_means==3,0],x[y_means==3,1],s=50, c='cyan',label='4')
plt.scatter(model.cluster_centers_[:,0], model.cluster_centers_[:,1],s=100,marker='s', c='red', label='Centroids')
plt.title('Income Spent Analysis')
plt.xlabel('Income')
plt.ylabel('Spent')
plt.legend()
plt.show()

"""### Training Regression algorithm"""

modelLR.fit(X_train, y_train)
modelPLR.fit(X_poly, y_train)
modelRFR.fit(X_train, y_train)
modelDTR.fit(X_train, y_train)
modelSVR.fit(X_trainsvm, y_trainsvm)

"""## Predicting the Test set for Validation"""

modelLRy_pred  = modelLR.predict(X_test)
modelPLRy_pred = modelPLR.predict(poly_reg.transform(X_test))
modelRFRy_pred = modelRFR.predict(X_test)
modelDTRy_pred = modelDTR.predict(X_test)
modelSVRy_pred = sc_y.inverse_transform(modelSVR.predict(sc_X.transform(X_test)))

"""## Evaluating the Model Performance"""

from sklearn.metrics import r2_score
print("Linear Regression Accuracy: {}".format(r2_score(y_test, modelLRy_pred)))
print("Polynomial Regression Accuracy: {}".format(r2_score(y_test, modelPLRy_pred)))
print("Random Forest Regression Accuracy: {}".format(r2_score(y_test, modelRFRy_pred)))
print("Decision Treee Regression Accuracy: {}".format(r2_score(y_test, modelDTRy_pred)))